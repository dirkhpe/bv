"""
This script will check the Database generated by script murcs_Get.py.
This script should run before restoring a Murcs deployment.
"""
import argparse
import logging
import pandas
from lib import my_env
from lib import localstore

# Configure command line arguments
parser = argparse.ArgumentParser(
    description="Check Database consistency from a murcs_Get.py extract."
)
parser.add_argument('-f', '--filename', type=str, required=True,
                    help='Please provide the database consistency description file.')
args = parser.parse_args()
cfg = my_env.init_env("bellavista", __file__)
lcl = localstore.sqliteUtils(cfg)
logging.info("Arguments: {a}".format(a=args))

# Read the file
df = pandas.read_excel(args.filename)

# Get record count per table
tables = df["table"].unique()
for table in tables:
    query = "SELECT count(*) as cnt FROM {table}".format(table=table)
    res = lcl.get_query(query)
    print("{table}: {cnt} records".format(table=table, cnt=res[0]["cnt"]))

for row in df.iterrows():
    # Get excel row in dict format
    xl = row[1].to_dict()
    if not pandas.isnull(xl["foreignkey"]):
        table = xl["table"]
        fkey = xl["foreignkey"]
        ftable = xl["foreigntable"]
        if pandas.isnull(xl["key"]):
            key = fkey
        else:
            key = xl["key"]
        query = """
            SELECT count(*) as cnt 
            FROM {table} 
            WHERE {fkey} NOT IN 
                (SELECT {key} FROM {ftable})
            """.format(table=table, fkey=fkey, key=key, ftable=ftable)
        res = lcl.get_query(query)
        cnt = res[0]["cnt"]
        if cnt != 0:
            print(" * * * * Link {table} to {ftable} is NOT OK! * * * * ".format(table=table, ftable=ftable))
